
The xml format is  made up of an enclosing canvas tag that
holds a graph tag that holds a set of nodetype, edgetype, node
and edge tags:

  <canvas (canvas attributes)>
    <graph>
       <nodetype name="type name" (node attributes) />
       <edgetype name="type name" (edge attributes) />       
       <node id=... type="node type" (node attributes) />
       <node id=... (node attributes)>
          <edge to=(node id) (edge attributes)/>
       </node>
       <edge from="node id" to ="node id" (edge attributes)
    </graph>
  </canvas>



canvas attributes:
level= default level used
radial= ("true", "false") is radial layout  default is true
simplegui = ("true", "false") if true then just show the graph view
bgcolor =  background color
bgimage = url of image to use in background

The only required  attribute for nodes is the "id" attribute.
Color values are named colors (e.g., red, blue, black, white, etc.) or
integer value of color.

node attributes:
id= the unique id of this node
type = node type (see below)
fillcolor
fontface
fontsize
fontstyle= (PLAIN,ITALIC,BOLD, BOLDITALIC)
cfontsize = font size to use when this node is the center node  
linecolor=color of box outline
mouse = text used for mouseover. Can contain new lines.
shape = one of:RECT, OVAL, TRIANGLE, 3DRECT,  BARREL  
textcolor
vtextcolor = text color used when this node has been clicked on, i.e., visited
title = text used in display
data=extra stuff used in the url processing described below

edge attributes:
color= edge color 
width=line width (integer)
arrow=size of arrow. (if negative then a filled arrow is drawn)


edge tags can be standalone or can be contained within a node tag.
If standalone they define the ids of the two nodes (i.e., from, to)
that the edge connects. If contained with a node tag they contain
the to node id.

The nodetype and edgetype tags allow you to define common properties
for nodes and edges. e.g., you could have a node type called "redbox"
and an edgetype called "blueline"

  <canvas>
    <graph>
       <edgeype name="blueline" color="blue" width="3" arrow="4"/>
       <nodetype name="redbox" fillcolor="red" shape="RECT" />
       <node id="some node" type="redbox">
          <edge to="some node" type="blueline"/>       
       ...

Now if you wanted a particular node (or edge) to have different attributes just
add them in: The node and edge properties take priority over the types:
       <node id="some node" type="redbox" fillcolor="blue">
          <edge to="some node" type="blueline" arrow="1"/>



Now there are a few more tags that we use to define the behavior of the applet.
command tags are used to create popup menus. They can be defined within a node,
nodetype, graph and canvas tags:
    <graph>
       <command label="View" url="%HTTP%/some_url?ID=%ID%" target="_some_browser_window"/>
       <nodetype name="type name" (node attributes)>
          <command label="View" url="%HTTP%/some_other_url?ID=%ID%" />
       </nodetype>

The command tags have a label  a template url and a browser window target. 
When the user right mouse clicks on a node the command tags defined for the node,
its nodetype, the graph and the canvas are used to create a popup menu. The
url template contains a set of macros (e.g., %ID%, %HTTP%) that are substituted
with the relevant values. The macros are:
%ID% the id field of the node
%TITLE% the title of the node
%DATA% data field of node
%HTTP% the http protocol header (e.g., http://www.foo.com:80/)

The url is then opened in the target window. If target equals blank (i.e., target="")
then the current applet browser window is used.

We also support a set of "click" tags:
  <click url="..." target="" />
  <shiftclick url="..." target="" />
  <controlclick url="..." target="" />

These likewise can be defined within the node, nodetype, graph and canvas tags
and are used when the user clicks, shift-clicks or control-clicks a node.
Same processing is done as with the command tags.
