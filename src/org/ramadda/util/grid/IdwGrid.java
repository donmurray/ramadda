/*
 * Copyright 2010 UNAVCO, 6350 Nautilus Drive, Boulder, CO 80301
 * http://www.unavco.org
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 */

package org.ramadda.util.grid;



import java.util.ArrayList;
import java.util.List;

/**
 * !!!!!!!!NOTE!!!!!!!
 * This file is copied from the UNAVCO SVN tree (I know I shouldn't do this
 * but I couldn't deal with yet another library from somewhere else).
 * SO: DO NOT EDIT THIS FILE HERE OR IF YOU DO MAKE SURE ITS CHECKED INTO 
 * THE UNAVCO TREE
 */
public class IdwGrid extends LatLonGrid  {

    private double[][] weightedValueGrid;

    private double[][] weightsGrid;

    private double radius = 0.0;
    private int numCells = 0;

    /*
-------------------------------------
|        |        |        |        |
-------------------------------------
|        |        |        |        |
-------------------------------------
|        |        |        |        |
-------------------------------------
|        |        |        |        |
-------------------------------------
|        |        |        |        |
-------------------------------------
|        |        |        |        |
-------------------------------------
*/


    /**
     * ctor
     *
     * @param width number of columns
     * @param height number of rows
     * @param north northern bounds
     * @param westc west bounds
     * @param west _more_
     * @param south southern bounds
     * @param east east bounds
     */
    public IdwGrid(int width, int height, double north, double west,
                      double south, double east) {
        super(width, height, north, west, south, east);
    }


    public IdwGrid(IdwGrid that) {
        super(that);
        this.radius = that.radius;
        this.numCells = that.numCells;
        if(that.weightsGrid!=null) {
            weightsGrid = GridUtils.cloneArray(that.weightsGrid);
       }
        if(that.weightedValueGrid!=null) {
            weightedValueGrid = GridUtils.cloneArray(that.weightedValueGrid);
       }
    }




    public void resetGrid() {
        super.resetGrid();
        GridUtils.fill(getWeightsGrid(), 0);
        GridUtils.fill(getWeightedValueGrid(), Double.NaN);
    }


    /**
     * create if needed and return the grid
     *
     * @return the grid
     */
    public double[][] getWeightsGrid() {
        if (weightsGrid == null) {
            weightsGrid = new double[getHeight()][getWidth()];
        }
        return weightsGrid;
    }


    public double[][] getWeightedValueGrid() {
        if (weightedValueGrid == null) {
            weightedValueGrid = new double[getHeight()][getWidth()];
        }
        return weightedValueGrid;
    }

    private class Index {
        boolean valid = true;
        int x;
        int y;
        double longitude;
        double latitude;
        public Index(int y, int x, double lat, double lon) {
            init(y, x,  lat, lon);
        }
        public void init(int y, int x, double lat, double lon) {
            this.valid = true;
            this.x = x;
            this.y = y;
            this.longitude = lon;
            this.latitude = lat;
        }
        public double distance(double lon, double lat) {
            double dx  = (lon-this.longitude);
            double dy  = (lat-this.latitude);
            return Math.sqrt(dx*dx+dy*dy);
        }
        public String toString() {
            if(!valid) return " NA ";
            //            return "x:" + x +" y:" +  y +" lon:" + longitude +" lat:" + latitude;
            return "x:" + x +" y:" +  y;
        }
    }

    private List<Index> regionIndices = new ArrayList<Index>();
    int cnt = 0;

    public int getCellIndexDelta() {
        int delta = Math.abs(numCells);
        if(radius>0) {
            //|----|----|----|----|----|----|----|----|
            double cellsPerDegree =  getWidth()/getGridWidth();
            delta = Math.abs((int) (radius*cellsPerDegree+0.5));
            //            System.err.println("radius: " + radius + " cellsPerDegree:" + cellsPerDegree +" delta:" + delta);
        }
        return delta;
    }

    private void findIndices(double lon, double lat, List<Index> indices) {
        for(Index i: indices) i.valid=false;
        int        yIndex = getLatitudeIndex(lat);
        int        xIndex = getLongitudeIndex(lon);
        int indexCnt = 0;
        int width = getWidth();
        int height = getHeight();

        int delta = getCellIndexDelta();
        for (int dx = -delta; dx <= delta; dx++) {
            for (int dy = -delta; dy <= delta; dy++) {
                int nx = xIndex + dx;
                int ny = yIndex + dy;
                if ((nx >= 0) && (nx < width)
                    && (ny >= 0)
                    && (ny < height)) {
                    if(indexCnt>=indices.size()) {
                        indices.add(new Index(ny,nx,getLatitude(ny), getLongitude(nx)));
                        if(indices.size()>100) {
                            System.err.println("NLAS: bad index size:" + indices.size());
                            System.err.println("NLAS: grid:" + this);
                            throw new IllegalArgumentException("NLAS: bad index size:" + indices.size());
                        }
                    } else {
                        indices.get(indexCnt).init(ny,nx,getLatitude(ny), getLongitude(nx));
                    }
                    indexCnt++;
                }
            }
        }
    }

    
    public void addValue(double lat, double lon, double value) {
        super.addValue(lat,lon,value);
        int        yIndex = getLatitudeIndex(lat);
        int        xIndex = getLongitudeIndex(lon);
        double[][]weights = getWeightsGrid();
        double[][]values = getWeightedValueGrid();
        int[][]countGrid =   getCountGrid();

        findIndices(lon, lat, regionIndices);


        
        if(cnt<5) {
	    //            System.err.println (yIndex + " " + xIndex +"  " + regionIndices);
        }

        for(Index index: regionIndices) {
            double weight = index.distance(lon,lat);
            //Check if we have a grid radius
            if(radius!=0) {
                if(weight<radius) continue;
            }

            if(Double.isNaN(values[index.y][index.x])) {
                values[index.y][index.x]  = weight*value;
            } else {
                values[index.y][index.x]  += weight*value;
            }
            weights[index.y][index.x] += weight;
        }
    }

    public void doAverageValues() {
        super.doAverageValues();
        double[][]weights = getWeightsGrid();
        double[][]values = getWeightedValueGrid();
        int height = getHeight();
        int width = getWidth();
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                if(weights[y][x]!=0) {
                    values[y][x] /= weights[y][x];
                }
            }
        }
    }


    /**
       Set the Radius property.

       @param value The new value for Radius
    **/
    public void setRadius (double value) {
	radius = value;
    }

    /**
       Get the Radius property.

       @return The Radius
    **/
    public double getRadius () {
	return radius;
    }




    public String toString() {
        return super.toString() +"  radius=" + radius +" num cells=" + numCells;
    }


    /**
       Set the NumCells property.

       @param value The new value for NumCells
    **/
    public void setNumCells (int value) {
	numCells = value;
    }

    /**
       Get the NumCells property.

       @return The NumCells
    **/
    public int getNumCells () {
	return numCells;
    }




}
