<?xml version="1.0" encoding="UTF-8"?>

<project basedir="../../../.." default="all" name="Ramadda">

    <target name="all" depends="repositoryjar,repositorywar,repositoryzip">
    </target>


    <target name="initbasic">
       <tstamp>
         <format property="date" pattern="yyyy-MM-dd HH:mm z" timezone="UTC"/>
       </tstamp>
        <property  name="version" value="1.3b"/>
        <property  name="_version" value="1_3b"/>

        <property name="rname" value="ramadda${version}"/>

        <property name="src_dir" value="${basedir}/src"/>

        <property name="dist_dir" value="${basedir}/dist"/>
        <mkdir dir="${dist_dir}"/>

        <property name="lib_dir" value="${basedir}/lib"/>
        <property name="repositoryrelpath" value="org/ramadda/repository" />
        <property name="repository_dir" value="${src_dir}/${repositoryrelpath}" />

        <property name="release_dir" value="${dist_dir}/${rname}" />
        <property name="tmpjar_dir" value="${dist_dir}/tmpjardir" />
        <property name="srcrelease_dir" value="${rname}src${_version}" />

        <property name="repositoryzip" value="${rname}.zip"/>
        <property name="repositoryjar" value="${rname}.jar"/>

	<property name="docs_dir" value="${dist_dir}/${rname}docs"/>
        <mkdir dir="${docs_dir}"/>

        <property name="docs_javadoc_dest" value="${docs_dir}/javadoc" />
        <mkdir dir="${docs_javadoc_dest}"/>

        <property name="compile_dir" value="${src_dir}"/>
        <property  name="build.sysclasspath" value="ignore"/>
        <property name="failonerror" value="true"/>
        <property name="srcversion" value="1.6"/>
        <property name="javatarget" value="1.6"/>


    </target>

    <target name="init" depends="initbasic,initcore,initfull">
    </target>


<!--
    NOTE: tika.jar needs to be before repositorylib.jar because repositorylib.jar contains the unjarred idv external.jar
    from the idv which contains an older version of tika.
-->
    <target name="initcore" if="core">
       <property name="classpath" value="${lib_dir}/tika-app-0.9.jar:${lib_dir}/repositorylib.jar:${lib_dir}/servlet-api.jar"/>
       <property name="manifestjars" value="tika-app-0.9.jar repositorylib.jar   servlet-api.jar"/>
       <property name="lib1" value="${lib_dir}/dummy.jar"/>
       <property name="lib2" value="${lib_dir}/dummy.jar"/>
    </target>

    <target name="initfull">
       <property name="classpath" value="${lib_dir}/idv.jar:${lib_dir}/tika-app-0.9.jar:${lib_dir}/repositorylib.jar:${lib_dir}/repositorytds.jar:${lib_dir}/servlet-api.jar"/>
       <property name="manifestjars" value="idv.jar tika-app-0.9.jar  repositorylib.jar   repositorytds.jar servlet-api.jar"/>
       <property name="lib1" value="${lib_dir}/visad.jar" />
       <property name="lib2" value="${lib_dir}/local-visad.jar"/>
    </target>


    <target name="clean" depends="init" >
        <delete>
            <fileset dir="${compile_dir}" includes="**/*.class"/>
        </delete>
    </target>

    <target name="runserver" depends="init">
      <java classname="org.ramadda.repository.server.RepositoryServer" maxmemory="512mb" fork="true">
          <arg value="-port"/>
          <arg value="8080"/>
<!--
          <arg value="-Dramadda.db=mysql"/>
-->
          <arg value="-Dramadda.cacheresources=false"/>
          <classpath>
             <pathelement path="${dist_dir}/${repositoryjar}"/>
             <pathelement path="${classpath}"/>
             <pathelement location=""/>
         </classpath>
     </java>
   </target>


    <target name="release" depends="init,clean">
<!--
        <antcall target="repositorylib"/>
-->
        <antcall target="repositoryjar"/>
        <antcall target="repositoryzip"/>
        <antcall target="repositorywar"/>
        <antcall target="clientjar"/>
    </target>


    <target name="download" depends="init">
        <scp
            todir="${user.name}@conan:/web/ftp/pub/ramadda/ramadda1.1"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
        >
        <fileset  dir="${lib_dir}" includes="repository.war,repository_src.jar,${repositoryzip},repositoryclient.jar,repositoryclient.zip"/>
        </scp>
    </target>








    <target name="clientjar" depends="init,clean">
        <javac
            verbose="false"
            classpath="${classpath}"
            debug="true"
            source="${srcversion}"
            deprecation="false" 
            destdir="${compile_dir}"
            failonerror="${failonerror}" 
            nowarn="true"
            srcdir="${src_dir}"
            fork="true"
            memoryMaximumSize="512m"
           target="${javatarget}"
        >
        <include name="${repositoryrelpath}/client/InteractiveRepositoryClient.java"/>
        </javac>
        <mkdir dir="${tmpjar_dir}"/>
        <delete includeemptydirs="true">
            <fileset dir="${tmpjar_dir}" includes="**/*"/>
        </delete>
        <unjar src="${lib_dir}/extra.jar" dest="${tmpjar_dir}"/>

        <jar 
            basedir="${compile_dir}"
            update="false"
            compress="true"
            jarfile="${dist_dir}/repositoryclient.jar">
           <manifest>
              <attribute name="Implementation-Title" value="Unidata's Ramada Client"/>
              <attribute name="Implementation-Version" value="1.0"/>
              <attribute name="Implementation-Vendor" value="RAMADDA"/>
              <attribute name="Main-class" value="org.ramadda.repository.client.RepositoryClient"/>
              <attribute name="Class-Path" value="unidatautil.jar commons-httpclient-3.1.jar commons-logging-1.1.jar commons-codec-1.3.jar"/>
            </manifest> 

<!--            <include name="lib/tmpjardir/org/apache/xerces/impl/dv/util/Base64.class"/> -->

            <include name="org/**/*.class"/>
            <include name="${lib_dir}/unidatautil.jar"/>
            <include name="${repository_dir}/htdocs/icons/folderopen.png"/>
            <include name="${repository_dir}/htdocs/icons/folderclosed.png"/>

	    </jar>

        <zip destfile="${dist_dir}/repositoryclient.zip">
         <zipfileset dir="${dist_dir}" includes="repositoryclient.jar" fullpath="repositoryclient/repositoryclient.jar"/>
         <zipfileset dir="${lib_dir}" includes="unidatautil.jar" fullpath="repositoryclient/unidatautil.jar"/>
         <zipfileset dir="${lib_dir}" includes="commons-httpclient-3.1.jar" fullpath="repositoryclient/commons-httpclient-3.1.jar"/>
         <zipfileset dir="${lib_dir}" includes="commons-logging-1.1.jar" fullpath="repositoryclient/commons-logging-1.1.jar"/>
         <zipfileset dir="${lib_dir}" includes="commons-codec-1.3.jar" fullpath="repositoryclient/commons-codec-1.3.jar"/>
         <zipfileset dir="${repository_dir}/release" includes="README.CLIENT" fullpath="repositoryclient/README"/>
        </zip>

    </target>


    <target name="compile" depends="init,clean,jc"/>



    <target name="jc" depends="init">
        <javac
            classpath="${classpath}"
            debug="true"
            source="${srcversion}"
            deprecation="false" 
            destdir="${compile_dir}"
            failonerror="${failonerror}" 
            nowarn="true"
            srcdir="${src_dir}"
	    fork="true"
            memoryMaximumSize="512m"
            target="${javatarget}"
        >
        <include name="${repositoryrelpath}/*.java"/>
        <include name="${repositoryrelpath}/admin/*.java"/>
        <include name="${repositoryrelpath}/auth/*.java"/>
        <include name="${repositoryrelpath}/client/*.java"/>
        <include name="${repositoryrelpath}/ftp/*.java"/>
        <include name="${repositoryrelpath}/harvester/*.java"/>
        <include name="${repositoryrelpath}/metadata/*.java"/>
        <include name="${repositoryrelpath}/monitor/*.java"/>
        <include name="${repositoryrelpath}/output/*.java"/>
        <include name="${repositoryrelpath}/type/*.java"/>
        <include name="${repositoryrelpath}/util/*.java"/>

        <include name="${repositoryrelpath}/search/*.java"/>
        <include name="${repositoryrelpath}/server/*.java"/>
        <include name="${repositoryrelpath}/services/*.java"/>
        <exclude name="${repositoryrelpath}/examples/*.java"/>
<!--
        <exclude name="${repositoryrelpath}/auth/ldap/*.java"/>
-->


<!--

        <include name="${repository_dir}/idv/IdvWebstartOutputHandler.java"/>
        <include name="${repository_dir}/idv/TdsOutputHandler.java"/>
-->
        </javac>
    </target>

    <target name="repositoryjar" depends="init,compile">
        <copy overwrite="true" file="${repository_dir}/resources/version.properties" tofile="${repository_dir}/resources/build.properties">
            <filterset>
                <filter token="DATE" value="${date}"/>
                <filter token="VERSION" value="${version}"/>
            </filterset>
        </copy>
        <jar 
            basedir="${src_dir}"
            compress="true"
            update="false"
            jarfile="${dist_dir}/${repositoryjar}">
           <manifest>
              <attribute name="Implementation-Title" value="Unidata's Ramada"/>
              <attribute name="Implementation-Version" value="1.1"/>
              <attribute name="Implementation-Vendor" value="RAMADDA"/>
              <attribute name="Main-class" value="org.ramadda.repository.server.RepositoryServer"/>
              <attribute name="Class-Path" value="${manifestjars}"/>
            </manifest> 
            <include name="**/*.class"/>
<!--
            <include name="**/*.xml"/>
-->
            <include name="${repositoryrelpath}/htdocs/**/*.*"/>
            <include name="${repositoryrelpath}/docs/userguide/processed/**/*.*"/>
            <include name="${repositoryrelpath}/resources/**/*.*"/>
            <include name="${repositoryrelpath}/idv/template.jnlp"/>
        </jar>
    </target>


    <target name="zip" depends="init">
        <zip destfile="${dist_dir}/${repositoryzip}">
          <zipfileset dir="${release_dir}" prefix="${rname}"/>
        </zip>
     </target>

    <target name="repositoryzip" depends="init,repositoryjar">
        <mkdir dir="${release_dir}"/>
        <delete includeemptydirs="true">
            <fileset dir="${release_dir}" includes="**/*"/>
        </delete>
        <mkdir dir="${release_dir}/lib"/>
        <copy  file="${dist_dir}/${repositoryjar}" todir="${release_dir}/lib" overwrite="true" />
        <copy  file="${lib_dir}/idv.jar" todir="${release_dir}/lib" overwrite="true" />
        <copy  file="${lib_dir}/repositorylib.jar" todir="${release_dir}/lib" overwrite="true" />
        <copy  file="${repository_dir}/release/ramadda.sh" todir="${release_dir}" overwrite="true">
            <filterset>
                <filter token="REPOSITORYJAR" value="${repositoryjar}"/>
            </filterset>

        </copy>
        <copy  file="${repository_dir}/release/ramadda.bat" todir="${release_dir}" overwrite="true">
            <filterset>
                <filter token="REPOSITORYJAR" value="${repositoryjar}"/>
            </filterset>

        </copy>
        <copy  file="${repository_dir}/release/ramaddamysql.sh" todir="${release_dir}" overwrite="true" >
            <filterset>
                <filter token="REPOSITORYJAR" value="${repositoryjar}"/>
            </filterset>

        </copy>
        <copy  file="${repository_dir}/README" todir="${release_dir}" overwrite="true" />
        <copy  file="${lib_dir}/repositorytds.jar" todir="${release_dir}/lib" overwrite="true" />
        <copy  file="${lib_dir}/servlet-api.jar" todir="${release_dir}/lib" overwrite="true" />
        <delete file="${lib_dir}/repository.tar"/>
        <delete file="${dist_dir}/${repositoryzip}"/>
        <zip destfile="${dist_dir}/${repositoryzip}">
          <zipfileset dir="${release_dir}" prefix="${rname}"/>
        </zip>

<!--
        <tar 
            destfile="${lib_dir}/repository.tar">
          <tarfileset dir="${release_dir}"
              prefix="${rname}">
              <include name="*"/>
         </tarfileset>

        </tar>

-->


<!--
        <delete includeemptydirs="true">
            <fileset dir="${release_dir}" includes="**/*"/>
        </delete>
-->
    </target>


    <target name="war" depends="repositorywar">
    </target>


    <target name="repositorywar" depends="init">
      <delete>
           <fileset file="${lib_dir}/repository.war"/>
       </delete>
      <war webxml="${repository_dir}/release/web.xml" destfile="${dist_dir}/repository.war">
          <webinf file="${repository_dir}/release/repository.properties"/>
          <lib file="${dist_dir}/${repositoryjar}"/>
          <lib file="${lib_dir}/idv.jar"/>
          <lib file="${lib_dir}/repositorylib.jar"/>
          <lib file="${lib_dir}/repositorytds.jar"/>
          <lib file="${lib_dir}/tika-app-0.9.jar"/>
      </war>


    </target>


    <target name="repositorylib" depends="init">
        <mkdir dir="${tmpjar_dir}"/>
        <delete includeemptydirs="true">
            <fileset dir="${tmpjar_dir}" includes="**/*"/>

        </delete>
        <unjar src="${lib1}" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/unidatacommon.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/idvmaps.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/extra.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/jython.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/gdata.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/external.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/twitter4j-1.1.4.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/jetty.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/jetty-util.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/lucene-core-3.0.3.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/mailapi.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/javadiff.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/smtp.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/gson-1.5.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/postgres.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/mysql.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/derby.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/derbytools.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/commons-io-1.4.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/commons-dbcp-1.4.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/commons-pool-1.5.5.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/commons-fileupload-1.2.2.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/commons-httpclient-3.1.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/metadata-extractor-2.4.0-beta-1.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/jfreechart.jar" dest="${tmpjar_dir}"/>

        <unjar src="${lib_dir}/ftplet-api-1.0.3.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/ftpserver-core-1.0.3.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/mina-core-2.0.0-M6.jar" dest="${tmpjar_dir}"/>

        <unjar src="${lib_dir}/log4j-1.2.15.jar" dest="${tmpjar_dir}"/>
<!--
        <unjar src="${lib_dir}/slf4j-api-1.5.2.jar" dest="${tmpjar_dir}"/>
-->
        <unjar src="${lib_dir}/slf4j-api-1.5.10.jar" dest="${tmpjar_dir}"/>
        <unjar src="${lib_dir}/slf4j-simple-1.5.10.jar" dest="${tmpjar_dir}"/>

<!--
        <unjar src="${lib_dir}/servlet-api.jar" dest="${tmpjar_dir}"/>
-->


        <jar 
            basedir="${tmpjar_dir}"
            update="false"
            compress="true"
            jarfile="${lib_dir}/repositorylib.jar">
              <include name="**"/>
              <exclude name="ucar/multiarray/**"/>
        </jar>

        <delete dir="${tmpjar_dir}"/>
    </target>



    <target name="javadoc" depends="init">
        <javadoc
            Author="true"
            Doctitle="RAMADDA"
            Use="true"
            Version="true"
            Windowtitle="RAMADDA"
            classpath="${classpath}:/upc/share/junit/junit.jar"
            destdir="${docs_javadoc_dest}"
            maxmemory="256m"
            sourcepath="${src_dir}">
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
            <package name="org.ramadda.repository.*"/>
            <package name="ucar.unidata.sql"/>
        </javadoc>
    </target>


     <target name="userauthenticator" depends="init">
        <javac
            classpath="${classpath}"
            debug="true"
            source="${srcversion}"
            deprecation="false" 
            destdir="${compile_dir}"
            failonerror="${failonerror}" 
            nowarn="true"
            srcdir="${src_dir}"
	    fork="true"
            memoryMaximumSize="512m"
            target="${javatarget}"
        >
        <include name="${repository_dir}/auth/TestUserAuthenticator.java"/>
        </javac>
        <jar 
            basedir="${compile_dir}"
            update="false"
            compress="true"
            jarfile="${dist_dir}/userauthenticator.jar">
              <include name="${repository_dir}/auth/TestUserAuthenticator.class"/>
        </jar>
        <echo message="The test user authenticator jar has been created: ${dist_dir}/userauthenticator.jar"/>
        <echo message="Copy the jar to &lt;ramadda home&gt;/plugins"/>

     </target>


    <target name="ldapplugin" depends="init">
        <javac
            verbose="false"
            classpath="${classpath}"
            debug="true"
            source="${srcversion}"
            deprecation="false" 
            destdir="${compile_dir}"
            failonerror="${failonerror}" 
            nowarn="true"
            srcdir="${src_dir}"
            fork="true"
            memoryMaximumSize="256m"
            target="${javatarget}"
        >
        <include name="${repository_dir}/auth/ldap/*.java"/>
        </javac>
        <jar 
            basedir="${compile_dir}"
            update="false"
            compress="true"
            jarfile="${dist_dir}/ldapplugin.jar">
            <include name="${repository_dir}/auth/ldap/*.class"/> 
         </jar>
    </target>


    <target name="ldapplugininstall" depends="ldapplugin">
        <copy overwrite="true"  todir="${user.home}/.ramadda/plugins">
             <fileset file="${dist_dir}/ldapplugin.jar"/>
        </copy>
    </target>



</project>
