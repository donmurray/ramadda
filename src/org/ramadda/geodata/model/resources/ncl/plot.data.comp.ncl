;************************************************
; Program: plot.data.comp.ncl
; Purpose: plot data comparisons using NCL 
; Output:  map plot or kmz
; Author:  Don Murray, CU-CIRES
;***********************************************

;--- load in the libraries
;************************************************
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/shea_util.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/contrib/ut_string.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/contrib/calendar_decode2.ncl"
load "$NCL_RESOURCES/kml.ncl"
load "$NCL_RESOURCES/remove_middle_contours.ncl"
load "$NCL_RESOURCES/change_units.ncl"
;************************************************


;*****************************************************************
; Function: set_kml_map_defaults
;
; Purpose:  Turn off map labelling, tickmarks, etc
;
; Params:   res - the map properites
; (override kml_map_defaults in kml.ncl)
;*****************************************************************
undef("set_kml_map_defaults")
procedure set_kml_map_defaults ( res:logical )
begin

  res@mpOutlineOn     = False
  res@mpPerimOn       = False
  res@mpGridAndLimbOn = False

;  Keep the border on so we can use it for clipping
;  res@tmXBBorderOn    = False
;  res@tmXTBorderOn    = False
;  res@tmYRBorderOn    = False
;  res@tmYLBorderOn    = False

  res@tmXBOn          = False
  res@tmXTOn          = False
  res@tmYROn          = False
  res@tmYLOn          = False
  res@gsnMaximize     = True

  ;; Annotations
  res@gsnLeftString = ""
  res@gsnRightString = ""
  res@tiMainString = ""

end 



;**********************************************************
; Function: readdata
;
; Purpose:  Read data from a file
;
; Params:   ncfile - file to read
;           opts   - options
;
; Return:   the data that was read
;*********************************************************
undef("readdata")
function readdata(ncfile:string, opts:logical)

local minLat,maxLat,minLon,maxLon,varname,varlevel,vardata

begin

; Region parameters
  minLat=opts@minLat
  maxLat=opts@maxLat
  minLon=opts@minLon
  maxLon=opts@maxLon
  noLatLon = ismissing(minLat) .or. \
             ismissing(maxLon) .or. \
             ismissing(minLat) .or. \
             ismissing(maxLat)
  
  varname=opts@variable
  varlevel=opts@level
  ;print(varlevel)

;--  Open the data file
  datafile = addfile(ncfile ,"r")  ; open input data file
  vars = getfilevarnames(datafile)
  nvars = dimsizes(vars)
  do v = 0, nvars-1
    testvar = vars(v)
    if (testvar .eq. varname) then
      break
    end if
    if (dimsizes(getfilevardims(datafile, testvar)) .gt. 2) then
      varname = testvar
      break
    end if
  end do
  vartype = getfilevartypes(datafile,varname)
  dNames= getfilevardims(datafile,varname)
  numdims=dimsizes(dNames)

;-- get the lat/lon info for normalizing
  lonname=dNames(numdims-1)
  lonvar = datafile->$lonname$
  numlons=dimsizes(lonvar)
  minDLon=lonvar(0)
  maxDLon=lonvar(numlons(0)-1)
  if (minDLon .gt. maxDLon) then
    tmp = maxDLon
    maxDLat = minDLon
    minDLon = tmp
    delete(tmp)
  end if
  latname=dNames(numdims-2)
  latvar = datafile->$latname$
  numlats=dimsizes(latvar)
  minDLat=latvar(0)
  maxDLat=latvar(numlats(0)-1)
  if (minDLat .gt. maxDLat) then
    tmp = maxDLat
    maxDLat = minDLat
    minDLat = tmp
    delete(tmp)
  end if
  
; if not passed in, then set from data
  if (noLatLon) then
    minLon = doubletofloat(minDLon)
    maxLon = doubletofloat(maxDLon)
    minLat = doubletofloat(minDLat)
    maxLat = doubletofloat(maxDLat)
  end if
  
; check for 0-360
  if(minDLon.gt.180 .or. maxDLon.gt.180) then
    if (minLon.lt.0 .or. maxLon.lt.0) then
      minLon = minLon+360
      maxLon = maxLon+360
    end if
  else 
    if (minDLon.lt.0 .or. maxDLon.lt.0) then
      if (minLon.gt.180 .or. maxLon.gt.180) then
        minLon = minLon-180
        maxLon = maxLon-180
      end if
    end if
  end if

  ;print(minLon)
  ;print(maxLon)

  latdiff=abs(maxLat-minLat)
  londiff=abs(maxLon-minLon)

  ratio=(2*latdiff)/londiff
  ;print(ratio)
  opts@ratio=ratio

  ;; find the level units
  if (.not. isatt(opts, "levelunit") .and. numdims .gt. 3) then
     levname=dNames(numdims-3)
     levvar = datafile->$levname$
     opts@levelunit = levvar@units
  end if

  tmpdata = datafile->$varname$
  if (numdims .eq. 3) then  ; (time,lat,lon)
    if (vartype .eq. "short") then
      vardata = short2flt(tmpdata(:,{minLat:maxLat},{minLon:maxLon}))
    else
      vardata = tmpdata(:,{minLat:maxLat},{minLon:maxLon})
    end if
  else ; (time,level,lat,lon)
    if (vartype .eq. "short") then
      if (varlevel .eq. "") then
        vardata = short2flt(tmpdata(:,0,{minLat:maxLat},{minLon:maxLon}))
      else
        vardata = short2flt(tmpdata(:,{stringtointeger(varlevel)},{minLat:maxLat},{minLon:maxLon}))
      end if
    else
      if (varlevel .eq. "") then
        vardata = tmpdata(:,0,{minLat:maxLat},{minLon:maxLon})
      else
        vardata = tmpdata(:,{stringtointeger(varlevel)},{minLat:maxLat},{minLon:maxLon})
      end if
    end if
  end if
  
  ;printVarSummary(vardata)
  if (noLatLon) then
    opts@minLat = minLat
    opts@maxLat = maxLat
    opts@minLon = minLon
    opts@maxLon = maxLon
  end if
  units = vardata@units
  outunits = opts@units
  ;; anomalies have to be handled separately
  if (opts@isanom .and.  (outunits .eq. "K" .or. outunits .eq. "degC")) then
    vardata@units = outunits
  else
    vardata = change_units(vardata, units, opts@units)
  end if
  return(vardata)

end

;************************************************
; Function:  remapData
;
; Purpose:   remap data from data2 into the grid of data1
;            if they are not on the same grid
;
; Params:    data1  - the first data (reference grid)
;            data2  - the second data
;
; return     data2 interpolated to data1 grid
;************************************************
undef("remapData")
function remapData(data1:float, data2:float)
local data, xi, yi, xo, yo

begin

; Get the dimensions

  xi = data2&lon
  yi = data2&lat
  xo = data1&lon
  yo = data1&lat
  data = linint2_Wrap(xi,yi,data2,False,xo,yo,0)

  return data

end

;*************************************************
; Function: subData
;
; Purpose:  subtract 2 datasets, normalizing grids
;           and making sure units are the same
;
; Params:   data1 - the first data (references grid and units)
;           data2 - the other data
;
; Return:   data1-data2
;*************************************************
undef("subData")
function subData(data1:float, data2:float)
local unit1, unit2, newData

begin

  remappedData = remapData(data1,data2)
  remappedData = change_units(remappedData, data2@units, data1@units)
  return data1-remappedData

end

;**************************************************
; Procedure:  cropKmlImage
;
; Purpose:  crop the extra white space around the image for KML
;
; Return:  the name of the resulting image
;**************************************************
undef ("cropKmlImage")
function cropKmlImage(wksname:string, suffix:string)
begin
    oldimagename = wksname+".000001"+suffix
    imagename = wksname+suffix
    tmpimagename = wksname+"_tmp.png"
    outimagename = wksname+".png"
    system("mv -f "+oldimagename+" "+imagename)
    system("%convert% -trim -shave 1x1 +repage "+imagename+" "+tmpimagename)
    system("mv -f " + tmpimagename + " " + outimagename)
    return outimagename
end

;**************************************************
; Procedure:  cropImage
;
; Purpose:  crop the extra white space around the image
;
; Return:  the name of the resulting image
;**************************************************
undef ("cropImage")
function cropImage(wksname:string, suffix:string)
begin
    oldimagename = wksname+".000001"+suffix
    imagename = wksname+suffix
    tmpimagename = wksname+"_tmp.png"
    outimagename = wksname+".png"
    system("mv -f "+oldimagename+" "+imagename)
    system("%convert% -trim +repage -bordercolor white -border 10 "+imagename+" "+tmpimagename)
    system("mv -f " + tmpimagename + " " + outimagename)
    return outimagename
end

;*************************************************
; Procedure:  addLogo
;
; Purpose:    add a logo to an image
;
; Params:     imageFilePath - the path to the image
;             logoFilePath - the logo path
;             annotation   - the annotation
;*************************************************
undef ("addLogo")
procedure addLogo (wksname:string, logoFilePath:string)
local imateFilePath, tmpFilePath
begin

  imageFilePath = wksname+".png"
  tmpFilePath = imageFilePath + ".tmp"    
  system("%convert% " + imageFilePath + " " + logoFilePath + " -gravity SouthWest -composite " + tmpFilePath)
  system("mv -f " + tmpFilePath + " " + imageFilePath)

end

;*************************************************
; Procedure:  addAnnotation
;
; Purpose:    add some text
;
; Params:     wksname - workstation name to add to
;             text - the text to incorporate
;*************************************************
undef ("addAnnotation")
procedure addAnnotation(wksname, text)
begin
  datestr = systemfunc("date -u +'%Y-%m-%d %H:%M UTC' ")
  txres               = True
  txres@txFontHeightF = 0.012
  if ((.not. ismissing(text)) .and. (text .ne. "")) then
    plottext = "Plotted from " + text + " on "+datestr
  else
    plottext = "Plotted on "+datestr
  end if
  ;gsn_text_ndc(wksname,plottext,0.5,0.025,txres)
  imageFilePath = wksname + ".png"    
  tmpFilePath = imageFilePath + ".tmp"    
  system("%convert% " + imageFilePath + "  -background white label:'" + plottext + "' -gravity Center -append " + tmpFilePath)
  system("mv -f " + tmpFilePath + " " + imageFilePath)

end

;************************************************************
;
; based on the NCL example script lb_19.ncl by Mary Haley
; 

undef("make_kml_labelbar")
function make_kml_labelbar (kml:string, name:string, wks:graphic,plot:graphic, res:logical)
local kml, name, plot, res, cmap, levels, colors, font_height, \
      labels, lbres, lbplot_name, lbplot_file, lbicon, lbwks, lbplot, \
      lbcropbox, files, out, views, lbres, just_strs, lbar_x, lbar_y, lbar_h, lbar_w, \
  lbar_orient, lbar_side, lbar_colors, lbar_labels, lbar_frac, lbar_ext, \
  lbar_bot, lbar_top, lbar_rgt, lbar_lft, lbar_fh, lbar_aln, lbar_ljust, \
  lbar_just, lbar_mnr, lbar_mjr, lbar_loff , lbid, nboxes, class_name, \
  labebar_object
begin
;
; This code attempts to see what kind of plot we have and
; to extract the labelbar from it.
;
  class_name = NhlClassName(plot)
  ;print(class_name)
  if(class_name.eq."mapPlotClass") then
    if(isatt(plot,"contour")) then
      getvalues plot@contour
        "pmAnnoViews" : views
      end getvalues
    else
      if(isatt(plot,"vector")) then
        getvalues plot@vector
          "pmAnnoViews" : views
        end getvalues
      else
        print("contour_labelbar: Error: can't determine type of plot")
        return
      end if
    end if
  else
    getvalues plot
      "pmAnnoViews" : views
   end getvalues
  end if
  ;print(views)

;---Error checking
  if(all(ismissing(views))) then
    print("contour_labelbar: Error: Couldn't extract labelbar associated with this plot")
    return
  end if

;---Attempt to extract labelbar
  labelbar_object = new(1,graphic)
  do i=0,dimsizes(views)-1
    if(NhlClassName(views(i)).eq."labelBarClass")  then
      labelbar_obj = views(i)
    end if
  end do

;---Error checking
  if(ismissing(labelbar_obj)) then
    print("contour_labelbar: Error: Couldn't extract labelbar associated with this plot")
    return
  end if
  
  getvalues wks
    "wkColorMap"             : cmap
  end getvalues

  getvalues plot@contour
    "cnLevels"               : levels
    "cnFillColors"           : colors
    "cnInfoLabelFontHeightF" : font_height
  end getvalues

  labels = "" + levels       ; Convert levels to a string array. This is
                             ; not necessary, but it gets rid of the
                             ; annoying error message about coercing types.

;---Retrieve labelbar resources associated with plot so we can regenerate it.
  getvalues labelbar_obj
    "vpXF"                 : lbar_x
    "vpYF"                 : lbar_y
    "vpHeightF"            : lbar_h
    "vpWidthF"             : lbar_w
    "lbOrientation"        : lbar_orient
    "lbLabelPosition"      : lbar_side
    "lbFillColors"         : lbar_colors
    "lbLabelStrings"       : lbar_labels
    "lbBoxFractions"       : lbar_frac
    "lbBoxMinorExtentF"    : lbar_ext
    "lbBottomMarginF"      : lbar_bot
    "lbTopMarginF"         : lbar_top
    "lbRightMarginF"       : lbar_rgt
    "lbLeftMarginF"        : lbar_lft
    "lbLabelFontHeightF"   : lbar_fh
    "lbLabelAlignment"     : lbar_aln
    "lbLabelJust"          : lbar_ljust
    "lbLabelFontColor"     : lbar_fc
    "lbJustification"      : lbar_just
    "lbBoxMinorExtentF"    : lbar_mnr
    "lbBoxMajorExtentF"    : lbar_mjr
    "lbLabelOffsetF"       : lbar_loff
    "lbPerimOn"            : perim_on
    "lbTitleOn"            : title_on
    "lbMonoFillPattern"    : mono_fill_pattern
    "lbBoxLinesOn"         : box_lines_on
    "lbLabelsOn"           : labels_on
  end getvalues

;
; Set some labelbar resources. Note: Not every single 
; labelbar resource is retrieved and set here. If the
; labelbar is not being recreated properly, then you
; may need to add some more resources to the "getvalues"
; block above, and then set them below.
;
  lbres                      = True

;---Set width and height of labelbar itself
  lbres@vpHeightF            = lbar_h
  lbres@vpWidthF             = lbar_w


; Allow more control over labelbars.
  lbres@lbAutoManage         = False

  lbres@lbOrientation        = lbar_orient
  lbres@lbLabelPosition      = lbar_side
  lbres@lbLabelFontHeightF   = lbar_fh
  lbres@lbLabelFontColor     = lbar_fc
;  print(lbar_fc)

; Turn various features on and off.
  lbres@lbLabelsOn           = labels_on
  lbres@lbPerimOn            = perim_on
  lbres@lbTitleOn            = title_on
  lbres@lbMonoFillPattern    = mono_fill_pattern
  lbres@lbBoxLinesOn         = box_lines_on
  lbres@lbFillColors         = lbar_colors

; Which point to position labelbar about.
  lbres@lbJustification      = lbar_just
  lbres@lbLabelAlignment     = lbar_aln
  lbres@lbLabelJust          = lbar_ljust

  lbres@lbLabelAutoStride    = True        ; NO LONGER NEEDED IN V6.1.0 

;---Regenerate the labelbar
  nboxes = dimsizes(lbar_colors)
    
  lbplot_name = wks@name  + "_lb"
  lbplot_file = lbplot_name + ".png"
  lbicon      = lbplot_name + ".png"

  lbwks = gsn_open_wks("png",lbplot_name)
  gsn_define_colormap(lbwks,cmap)
  
  
    lbid = gsn_create_labelbar(lbwks,dimsizes(levels)+1,labels,lbres)
    
    lbplot = create "lbplot" mapPlotClass lbwks
    "mpOutlineOn"     : False
    "mpPerimOn"       : False
    "mpGridAndLimbOn" : False
    "tmXBBorderOn"    : False
    "tmXTBorderOn"    : False
    "tmYRBorderOn"    : False
    "tmYLBorderOn"    : False
    "tmXBOn"          : False                  
    "tmXTOn"          : False
    "tmYROn"          : False
    "tmYLOn"          : False
    end create
      
   annoid = gsn_add_annotation(lbplot,lbid,False)
   draw(lbplot)
   frame(lbwks)
   
   wksname = lbwks@name
;   lbcropbox = kml_get_vp_cropbox(lbwks,lbid)
   delete(lbwks)

   lbicon = cropImage(wksname,".png")
;   lbicon = kml_crop_plot(lbcropbox,res)

;---Turn off the current labelbar so we can draw the one we just regenerated.
  setvalues views(0)
    "lbLabelBarOn" : False
  end setvalues
  return(lbicon)
end

undef("make_kml_image")
function make_kml_image(kml:string, name:string, wks:graphic, plot:graphic, kres:logical, rescf:logical, makeLabelBar:logical)

begin

  if (makeLabelBar) then
    ; position resources for ScreenOverlay element
    kres@kmlOverlayXY = True
    kres@kmlOverlayXYx = 0
    kres@kmlOverlayXYy = 1
    kres@kmlOverlayXYxunits = "fraction" ;
    kres@kmlOverlayXYyunits = "fraction" ; pixels, or insetPixels
    kres@kmlScreenXY = True
    kres@kmlScreenXYx = 0
    kres@kmlScreenXYy = 1
    kres@kmlScreenXYxunits = "fraction"
    kres@kmlScreenXYyunits = "fraction"
  
    ; crops the labelbar from the plot and converts it to a png
    lbicon = make_kml_labelbar(kml, "label bar", wks, plot, kres)
  
    ; add labelbar to KML document as a ScreenOverlay element
    kml = kml_add_screenoverlay ( kml, "Legend", lbicon, kres )

    ; add cropped labelbar filename to list of files to 
    ; be compressed in KMZ archive
    kml_add_kmzfile(kml,lbicon)
  
    ;Turn off the label bar for future plots
    rescf@lbLabelBarOn = False         ; turn off label bar

    ; add a folder for the ground overlay(s)
    kml_folder = kml_open_folder(kml, "GroundOverlay Folder",False)

  end if

  draw(plot)
  frame(wks)

  ; "delete(wks)" can not be called within a function, 
  ;need to find a work around for this
;;  wksname = wks@name
;;  delete(wks)
;;    
;;  ;kres@kmlCropAlphaColor = "white"
;;  ; crops the groundoverlay map and converts it to png
;;  ; must "delete(wks)" before this command
;;  ;icon = kml_crop_plot(cropbox, kres)
;;  icon = cropKmlImage(wksname, ".png")
;;  
;;  ; add cropped map to KML document as a GroundOverlay element
;;  kml = kml_add_groundoverlay(kml, name, icon, LatLonBox, 0, kres)
;;    
;;  ; add cropped map filename to list of files to be 
;;  ; compressed in KMZ archive
;;  kml_add_kmzfile(kml,icon)
  return kml
end

;************************************************
; Procedure: set var title
;
; Purpose:  set the var title
;
; Params:  data  - the data files to plot
;          opts - global options
;          rescf - plot options
;          isanom - is this an anomaly
;***********************************************
undef("setvartitle")
function setvartitle(data:float, opts:logical, isanom:logical, level, levelunit:string)
local vartitle
begin
  if (isatt(data,"long_name")) then
    vartitle = data@long_name
  else
    vartitle = opts@variable
  end if
  if (isanom) then
    vartitle = vartitle + " Anomaly"
  end if 
  if (.not. (opts@level .eq. "")) then
    vartitle = vartitle + " (" + level +" "+levelunit+ ")"
  end if
  return vartitle
end

;************************************************
; Procedure: plotmap
;
; Purpose: plot map(s)
;
; Params:  files  - the data files to plot
;          wks_name - workstation name
;          wks_type - workstation type (x11, png, etc)
;          opts - allow passing optional args
;***********************************************
undef("plotmap")
procedure plotmap(files[*]:string, wks_name:string, wks_type:string,  opts:logical)
local data, numfiles, plots, dodiff, doPanel, isanom

begin

  numfiles = dimsizes(files)
  data = readdata(files(0), opts) 
  plots = new(numfiles,graphic)
  dodiff = opts@outtype .eq. "diff" .and. numfiles .eq. 2
  isanom = opts@isanom
  doGoogle = (opts@plottype .eq. "kmz")
  doPanel = (.not. dodiff) .and. (.not. doGoogle) .and. numfiles .gt. 1 
  plottitles = opts@titles
  ;print(plottitles)
  numtitles = dimsizes(plottitles)
  usepolar = opts@usepolar
  

  rescf = True;
  ;rescf@gsnAddCyclic          = (addCyclic .eq. "true")    ; turn off if subset
  rescf@gsnAddCyclic          = False
  rescf@mpMinLatF            = opts@minLat       ; range to zoom in on
  rescf@mpMaxLatF            = opts@maxLat
  if (.not. usepolar .or. doGoogle) then 
    rescf@mpMinLonF            = opts@minLon
    rescf@mpMaxLonF            = opts@maxLon
    centerLonF         = (opts@maxLon + opts@minLon)/2
    centerLatF         = (opts@maxLat + opts@minLat)/2
    rescf@mpCenterLonF         = centerLonF
    usepolar = False ;; in case this is doGoogle
  else 
    if (opts@maxLat .gt. 0) then
      rescf@gsnPolar = "NH"
    else
      rescf@gsnPolar = "SH"
    end if
    rescf@mpCenterLonF = opts@meridian  
    rescf@gsnAddCyclic          = True
  end if


  rescf@gsnDraw           = False         ; Don't draw plots (for overlay)
  rescf@gsnFrame          = False         ; don't advance frame yet
  
  wks_type@wkBackgroundColor="white"
  wks_type@wkForegroundColor="black"
  
  ; map stuff
  rescf@mpFillOn = False
  
  rescf@mpOutlineBoundarySets = "National"
  rescf@mpDataBaseVersion = "MediumRes"
  rescf@mpOutlineSpecifiers = (/"Canada : Provinces","United States : States"/) 
  rescf@mpDataSetName = "Earth..4"
  
  rescf@mpGeophysicalLineThicknessF = 1.5
  rescf@mpNationalLineThicknessF = 1.5

  rescf@mpGeophysicalLineColor = "gray49"       ; color of cont. outlines
  rescf@mpNationalLineColor    = rescf@mpGeophysicalLineColor ; color of nat'l outlines
  rescf@mpUSStateLineColor     = rescf@mpGeophysicalLineColor ; color of state outlines
  
  ; contour stuff
  rescf@gsnSpreadColors = True
  rescf@cnFillOn= True          ; color fill
  rescf@cnFillMode= "AreaFill"  

  ; labelbar
  if (doPanel) then
    rescf@lbLabelBarOn = False         ; turn off label bar
    rescf@mpGeophysicalLineThicknessF = .5  ; reduce the line thickness
    rescf@mpNationalLineThicknessF = .5     ; reduce the line thickness
  end if

  rescf@tiMainFontHeightF=0.017
  rescf@tiMainFontThicknessF=.8
  rescf@tmXBLabelFontHeightF=0.011
  rescf@tmYLLabelFontHeightF=0.011
  cint = opts@cint

  if (.not. ismissing(cint) .and. cint .ne. 0.) then
    rescf@cnLevelSelectionMode = "ManualLevels"
    rescf@cnLevelSpacingF = opts@cint
    rescf@cnMinLevelValF = opts@cmin
    rescf@cnMaxLevelValF = opts@cmax
  end if

  
  if (doGoogle) then

    wks_type="png"
    set_kml_map_defaults(rescf) ; turn off many options
    rescf@cnLinesOn = False ; turn off contour lines
    rescf@cnLineLabelsOn=False
    ;rescf@lbLabelFontColor="SlateGray"
    rescf@gsnMaximize = True
    rescf@gsnPaperOrientation = "portrait"
    rescf@gsnLeftString = ""
    rescf@gsnCenterString = ""
    rescf@gsnRightString = ""
    rescf@gsnBoxMargin = 0.0
    wks_type@wkWidth                     = 1600
    wks_type@wkHeight                    = 1600

    ; label bar
    rescf@lbLabelBarOn = True;
    rescf@lbLabelFontHeightF = 0.008;
    rescf@lbOrientation         = "Horizontal"   
    rescf@pmLabelBarWidthF      = 0.3               ; default is shorter
    rescf@pmLabelBarHeightF     = 0.040             ; default is taller
      
  else

    wks_type="png"
    if (.not. doPanel) then
      rescf@gsnMaximize = True
    else 
      rescf@gsnMaximize = False
    end if
    ratio = opts@ratio
    wks_type@wkWidth                     = 800
    wks_type@wkHeight                    = 800
    ;rescf@vpXF = .075
    ;rescf@vpYF = .95
    ;rescf@vpWidthF = .85
    ;rescf@vpHeightF= .5*ratio
    rescf@cnLineLabelsOn=True
    rescf@cnLineLabelPlacementMode = "Computed"
    rescf@cnLineLabelAngleF=0
    rescf@cnConstFLabelFontHeightF=0.010

    ; label bar
    rescf@lbOrientation         = "Horizontal"   
    rescf@pmLabelBarWidthF      = 0.4               ; default is shorter
    rescf@pmLabelBarHeightF     = 0.075             ; default is taller

    ; lable bar title
    rescf@lbTitleFontHeightF = 0.013
    rescf@lbTitlePosition = "Bottom"
    ;rescf@lbTitleOffsetF = 0.005
    ;rescf@lbBottomMarginF = 0.025

  end if
    
  LatLonBox = new(4,float)
  LatLonBox(0) = stringtofloat(rescf@mpMaxLatF)
  LatLonBox(1) = stringtofloat(rescf@mpMinLatF)
  LatLonBox(2) = stringtofloat(rescf@mpMaxLonF)
  LatLonBox(3) = stringtofloat(rescf@mpMinLonF)

  wks = gsn_open_wks(wks_type,wks_name) 
  ;drawNDCGrid(wks)
  gsn_define_colormap(wks, opts@colormap)

  ;; handle precip
  if (data@units .eq. "mm/day") then
    if (.not. isanom .and. .not. dodiff) then
      rescf@gsnSpreadColorEnd = -2
      newindex = NhlNewColor(wks,1.0,1.0,1.0)
      rescf@gsnCnMissingColor = newindex
    end if
    gsn_reverse_colormap(wks)
  end if
  level = opts@level
  if (isatt(opts,"levelunit")) then
    levelunit = opts@levelunit
  else
    levelunit = ""
  end if
  if (levelunit .eq. "Pa") then
    level = stringtoint(level)/100
    levelunit = "hPa"
  end if

  ; TODO: Handle multiple times
  if (dodiff) then
    plottitle = ""
    if ((.not. ismissing(plottitles(0))) .and. (plottitles(0) .ne. "")) then
      plottitle = plottitles(0)
    end if
    if (numfiles .gt. 1) then
      do i = 1,numfiles-1
        newdata = readdata(files(i),opts)
        data = subData(data,newdata)
        if (numtitles .ge. i .and. \
            (.not. ismissing(plottitles(i))) .and. \
            (plottitles(i) .ne. "")) then
          plottitle = plottitle + " minus ~C~" + plottitles(i)
        end if
        delete(newdata)
      end do
    end if
    rescf@tiMainString        = plottitle
    mydata = data(0,:,:)
    rescf@gsnLeftString = setvartitle(mydata, opts, isanom, level, levelunit)
    if (doGoogle) then
      set_kml_map_defaults(rescf) ; turn off many options
      ;;rescf@lbTitleString = rescf@gsnLeftString
    end if
    if (cint .eq. 0) then
      symMinMaxPlt(mydata,20,False,rescf)
    end if
    if (usepolar) then
      plots(0) = gsn_csm_contour_map_polar(wks,mydata,rescf)
    else
      plots(0) = gsn_csm_contour_map_ce(wks,mydata,rescf)
    end if
    ;if (cint .eq. 0) then
    if (rescf@cnMinLevelValF .eq. (-1*rescf@cnMaxLevelValF)) then 
      res2 = remove_middle_contours(plots(0), rescf, 1)
      if (usepolar) then
        plots(0) = gsn_csm_contour_map_polar(wks,mydata,res2)
      else
        plots(0) = gsn_csm_contour_map_ce(wks,mydata,res2)
      end if
    end if
    ;if (.not. doGoogle) then
    ;    addAnnotation(wks,opts@annotation)
    ;end if
    delete(mydata)
  else 
    if (.not. doGoogle) then
      mydata = data(0,:,:)
      rescf@gsnLeftString = setvartitle(mydata, opts, isanom, level, levelunit)
      if ((.not. ismissing(plottitles(0))) .and. (plottitles(0) .ne. "")) then
        rescf@tiMainString        = plottitles(0)
      end if
      ;rescf@lbTitleString = rescf@gsnLeftString
      if (isanom .and. cint .eq. 0) then
        symMinMaxPlt(mydata,20,False,rescf)
      end if
      if (usepolar) then
        plots(0) = gsn_csm_contour_map_polar(wks,mydata,rescf)
      else
        plots(0) = gsn_csm_contour_map_ce(wks,mydata,rescf)
      end if
      if (isanom .or. \
       (isdefined(rescf@cnMinLevelValF) .and. isdefined(rescf@cnMaxLevelValF) \ 
       .and. (rescf@cnMinLevelValF .eq. (-1*rescf@cnMaxLevelValF)))) then 
        res2 = remove_middle_contours(plots(0), rescf, 1)
        if (usepolar) then
          plot = gsn_csm_contour_map_polar(wks,mydata,res2)
          plots(0) = plot
        else
          plots(0) = gsn_csm_contour_map_ce(wks,mydata,res2)
        end if
      end if
      ;if (.not. doPanel) then
      ;  addAnnotation(wks,opts@annotation)
      ;end if
      delete(mydata)
      do i = 1,numfiles-1
        nextdata = readdata(files(i),opts)
        mydata = nextdata(0,:,:)
        rescf@gsnLeftString = setvartitle(mydata, opts, isanom, level, levelunit)
        if ((.not. ismissing(plottitles(i))) .and. (plottitles(i) .ne. "")) then
          rescf@tiMainString        = plottitles(i)
        end if
        if (usepolar) then
          plots(i) = gsn_csm_contour_map_polar(wks,mydata,rescf)
        else
          plots(i) = gsn_csm_contour_map_ce(wks,mydata,rescf)
        end if
        ;if (isanom .and. cint .eq. 0) then
        ;if (isanom .or. (rescf@cnMinLevelValF .eq. rescf@cnMaxLevelValF)) then 
        if (isanom .or. \
          (isdefined(rescf@cnMinLevelValF) .and. isdefined(rescf@cnMaxLevelValF) \ 
          .and. (rescf@cnMinLevelValF .eq. (-1*rescf@cnMaxLevelValF)))) then 
          res2 = remove_middle_contours(plots(i), rescf, 1)
          if (usepolar) then
            plots(i) = gsn_csm_contour_map_polar(wks,mydata,res2)
          else
            plots(i) = gsn_csm_contour_map_ce(wks,mydata,res2)
          end if
        end if
        ;if (.not. doPanel) then
        ;  addAnnotation(wks,opts@annotation)
        ;end if
        delete(mydata)
        delete(nextdata)
      end do

    else ;; doGoogle

      ;; Make the first plot to get the labelbar
      mydata = data(0,:,:)
;;      ;; make title for labelbar
;;      vartitle = setvartitle(mydata, opts, isanom, level, levelunit)

      name="Plot 1"
      if ((.not. ismissing(plottitles(0))) .and. (plottitles(0) .ne. "")) then
        name        = plottitles(0)
      else
        name = "Plot 1"
      end if 
      
      if (isanom .and. cint .eq. 0) then
        symMinMaxPlt(mydata,20,False,rescf)
      end if
      gplot = gsn_csm_contour_map_ce(wks,mydata,rescf)
      ;if (isanom) then
      ;if (isanom .or. (rescf@cnMinLevelValF .eq. rescf@cnMaxLevelValF)) then 
      if (isanom .or. \
        (isdefined(rescf@cnMinLevelValF) .and. isdefined(rescf@cnMaxLevelValF)\ 
       .and. (rescf@cnMinLevelValF .eq. (-1*rescf@cnMaxLevelValF)))) then 
        res2 = remove_middle_contours(gplot, rescf, 1)
        gplot = gsn_csm_contour_map_ce(wks,mydata,res2)
      end if
      delete(mydata)

      kres = True
      kres@product_dir=opts@product_dir
  
      ; open a new KML document
      kml = kml_open_document(wks_name, wks_name, kres) ; open new kml document
      kml = kml_add_lookat( kml, doubletofloat(centerLonF), doubletofloat(centerLatF), 0.0, 4616152, kres)
  
      kml = make_kml_image(kml, name, wks, gplot, kres, rescf, True)
        
      wksname = wks@name
      delete(wks)
      ;kres@kmlCropAlphaColor = "white"
      ; crops the groundoverlay map and converts it to png
      ; must "delete(wks)" before this command
      icon = cropKmlImage(wksname, ".png")
      
      ; add cropped map to KML document as a GroundOverlay element
      kml = kml_add_groundoverlay(kml, name, icon, LatLonBox, 0, kres)
        
      ; add cropped map filename to list of files to be 
      ; compressed in KMZ archive
      kml_add_kmzfile(kml,icon)

      if (numfiles .gt. 1) then
        do i = 1,numfiles-1

          if ((.not. ismissing(plottitles(i))) .and. (plottitles(i) .ne. "")) then
            name        = plottitles(i)
          else
            name = "Plot "+i
          end if 
      
          wks = gsn_open_wks(wks_type,wks_name+i) 
          ;drawNDCGrid(wks)
          gsn_define_colormap(wks, opts@colormap)
        
          ;; handle precip
          if (data@units .eq. "mm/day") then
            if (.not. isanom .and. .not. dodiff) then
              rescf@gsnSpreadColorEnd = -2
              newindex = NhlNewColor(wks,1.0,1.0,1.0)
              rescf@gsnCnMissingColor = newindex
            end if
            gsn_reverse_colormap(wks)
          end if
          nextdata = readdata(files(i),opts)
          mydata = nextdata(0,:,:)
          gplot = gsn_csm_contour_map_ce(wks,mydata,rescf)
          ;if (isanom .and. cint .eq. 0) then
          if (isanom .or. \
            (isdefined(rescf@cnMinLevelValF) .and. isdefined(rescf@cnMaxLevelValF) \ 
            .and. (rescf@cnMinLevelValF .eq. (-1*rescf@cnMaxLevelValF)))) then 
            res2 = remove_middle_contours(gplot, rescf, 1)
            gplot = gsn_csm_contour_map_ce(wks,mydata,res2)
          end if
          delete(mydata)
          delete(nextdata)

          kml = make_kml_image(kml, name, wks, gplot, kres, rescf, False)

          wksname = wks@name
          delete(wks)
        
          ; crops the groundoverlay map and converts it to png
          ; must "delete(wks)" before this command
          icon = cropKmlImage(wksname, ".png")
      
          ; add cropped map to KML document as a GroundOverlay element
          kml = kml_add_groundoverlay(kml, name, icon, LatLonBox, 0, kres)
        
          ; add cropped map filename to list of files to be 
          ; compressed in KMZ archive
          kml_add_kmzfile(kml,icon)
        end do
      end if
  
      kml_folder=kml_close_folder(kml) ; close the folder
        
      ; close kml document
      kml = kml_close_document(kml)
  
      ; write kml document to file 
      kml_write(kml)
  
      ; zip kml file and overlay images together in to "example05.kmz"
      kml_make_kmz(kml)
    end if
  end if
  
  if (doGoogle) then

    if (dodiff) then
      print("doGoogle, doDiff");
      kres = True
        
      kres@product_dir=opts@product_dir
  
      ; open a new KML document
      kml = kml_open_document(wks_name, wks_name, kres) ; open new kml document
      kml = kml_add_lookat( kml, doubletofloat(centerLonF), doubletofloat(centerLatF), 0.0, 4616152, kres)
  
      if ((.not. ismissing(plottitles(0))) .and. (plottitles(0) .ne. "")) then
        name        = plottitles(0)
      else
        name = "Plot "+i
      end if 

      kml = make_kml_image(kml, name, wks, plots(0), kres, rescf, True)

      ; "delete(wks)" can not be called within a function, 
      ; need to find a work around for this
      wksname = wks@name
      delete(wks)
        
      ; crops the groundoverlay map and converts it to png
      ; must "delete(wks)" before this command
      ;icon = kml_crop_plot(cropbox, kres)
      icon = cropKmlImage(wksname, ".png")
      
      ; add cropped map to KML document as a GroundOverlay element
      kml = kml_add_groundoverlay(kml, "GroundOverlay", icon, LatLonBox, 0, kres)
        
      ; add cropped map filename to list of files to be compressed in KMZ archive
      kml_add_kmzfile(kml,icon)
        
      kml_folder=kml_close_folder(kml) ; close the folder

      ; close kml document
      kml = kml_close_document(kml)
  
      ; write kml document to file 
      kml_write(kml)
  
      ; zip kml file and overlay images together in to "example05.kmz"
      kml_make_kmz(kml)
    end if
      
  else
    if (doPanel) then

      ;---Create resources for paneling
      resP                            = True
      resP@gsnMaximize                = True    
      resP@gsnPanelLabelBar           = True    
      resP@txFontHeightF              = .20

      ; label bar
      resP@lbOrientation         = "Horizontal"   
      resP@pmLabelBarWidthF      = 0.4               ; default is shorter
      resP@pmLabelBarHeightF     = 0.075             ; default is taller

      ; label bar title
      ;resP@lbTitleString = rescf@lbTitleString
      ;resP@lbTitleFontHeightF = 0.013
      ;resP@lbTitlePosition = "Bottom"
      ;resP@lbTitleOffsetF = 0.005

      resP@gsnFrame = False ; Don't advance frame for annotation overlay
      resP@gsnPanelDebug = False ; set to True for debugging

      ;---Scale plots based on one of the smaller plots, and not the first one.
      ;resP@gsnPanelScalePlotIndex     = 1

      ;---Add some extra space between plots since they are too close together
      resP@gsnPanelXWhiteSpacePercent = 2
      resP@gsnPanelYWhiteSpacePercent = 3

      ;---Leave some room for the leftmost and rightmost tickmark labels.
      resP@gsnPanelLeft               = 0.05
      resP@gsnPanelRight              = 0.95
      resP@gsnPanelCenter = False

      ;---figure out how to lay out the panels
      numPanels = dimsizes(plots)
      if (numPanels .eq. 2) then
         panels = (/2,1/)
      else
        if (numPanels .gt. 20) then
          numRows = numPanels/5+1
          panels = (/numRows,5/)
        else
          if (numPanels .gt. 12) then
            numRows = numPanels/4+1
            panels = (/numRows,4/)
          else 
            if (numPanels .gt. 6) then
              numRows = numPanels/3+1
              panels = (/numRows,3/)
            else
              numRows = numPanels/2+1
              panels = (/numRows,2/)
            end if
          end if
        end if
      end if
      ;;print(panels)

      ;---Panel the plot.
      gsn_panel(wks,plots,panels,resP)
      ;addAnnotation(wks,opts@annotation)
      ;maximize_output(wks, False)
    else 
      draw(plots(0))
    end if
    frame(wks)
    wksname = wks@name
    delete(wks)
    delete(plots)
    image = cropImage(wksname,".png")
    addAnnotation(wksname, opts@annotation)
    if (isatt(opts,"logo") .and. .not. (opts@logo .eq. "")) then
       addLogo(wksname, opts@logo)
    end if
  end if

end

;**************************************************
; Main routine
;**************************************************

begin

  ; --- Read in the environment variables
  
  ; data variables
  variable=(getenv("variable"))
  if (ismissing(variable)) then 
    print("no variable")
    status_exit(-1)
  end if

  ; level
  level = getenv("level")
  if (ismissing(level)) then
    level = ""
  end if

  tmpfiles=getenv("ncfiles")
  if (ismissing(tmpfiles)) then 
    print("no files")
    status_exit(-2)
  end if
  ncfiles=str_split(tmpfiles,",")
  
  ;titles
  tmptitles=getenv("titles")
  if (ismissing(tmptitles)) then 
    numfiles = dimsizes(ncfiles)
    titles = new((/numfiles/),string)
  else 
    titles=str_split(tmptitles,";")
  end if
  
  ;logo
  tmplogo=getenv("logo")
  if (ismissing(tmplogo)) then 
    logo = ""
  else 
    logo=tmplogo
  end if
  
  ; output variables
  wks_name=(getenv("wks_name"))
  if (ismissing(wks_name)) then
    wks_name="foo"
  end if
  
  productDir=(getenv("productdir"))
  if (ismissing(productDir)) then
    productDir=""
  end if
  
  plotType=getenv("plot_type")
  if (ismissing(plotType)) then
    plotType = "png"
  end if
  
  outType=getenv("output")
  if (ismissing(outType)) then
    outType = "diff"
  end if

  anom=getenv("anom")
  if (.not. ismissing(anom)) then
    isanom = anom .eq. "true"
  else
    isanom = False
  end if
  
  
  colormap=getenv("colormap")
  if (ismissing(colormap)) then
    if (isanom .or. outType .eq. "diff") then
      colormap = "testcmap"
    else
      colormap = "rainbow"
    end if
  end if
  
  ;
  ; Region parameters
  minLat=stringtofloat(getenv("minLat"))
  maxLat=stringtofloat(getenv("maxLat"))
  minLon=stringtofloat(getenv("minLon"))
  maxLon=stringtofloat(getenv("maxLon"))
  
  units=getenv("units")
  if (ismissing(units)) then
    units = ""
  end if
  
  ;
  ; contour parameters
  temp = getenv("cint")
  if (.not. ismissing(temp)) then
    cint = stringtofloat(temp)
  else
    cint = 0.
  end if
  cmin=stringtofloat(getenv("cmin"))
  cmax=stringtofloat(getenv("cmax"))

  polar=getenv("usepolar")
  if (.not. ismissing(polar)) then
    usepolar = polar .eq. "true"
  else
    usepolar = False
  end if
  
  temp = getenv("meridian")
  if (.not. ismissing(temp)) then
    meridian = stringtofloat(temp)
  else
    meridian = 0.
  end if
  if (meridian .gt. 180) then
     meridian = meridian - 360
  end if

  options = True
  options@plottype=plotType
  options@outtype=outType
  options@product_dir=productDir
  options@variable=variable
  options@level=level
  options@minLat = minLat
  options@maxLat = maxLat
  options@minLon = minLon
  options@maxLon = maxLon
  options@colormap = colormap
  options@isanom = isanom
  options@annotation = getenv("annotation")
  options@titles = titles
  options@units=units
  options@cint=cint
  options@cmin=cmin
  options@cmax=cmax
  options@usepolar=usepolar
  options@meridian=meridian
  options@logo=logo
  
  plotmap(ncfiles, wks_name, "png", options)
  
  status_exit(0)

end
